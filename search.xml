<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【Java基础】Java内存模型</title>
    <url>/posts/25820.html</url>
    <content><![CDATA[<!-- build time:Thu May 14 2020 12:50:22 GMT+0800 (GMT+08:00) --><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h4><p>Java中你的内存模型主要分为5个部分。</p><ol><li>栈（Stack）：存放的是方法中的局部变量。方法的运行一定要在栈中运行。<br>局部变量：方法的参数或方法{}内部的变量。<br>作用域：一旦超出作用域，立刻从栈内存中消失。</li><li>堆（Heap）：凡是new出来的东西都放在堆中。堆里面存放的都是地址值。</li><li>方法区（Method Area）：存储.class相关信息，包含方法的消息。</li><li>本地方法栈：与操作系统相关。</li><li>寄存器：与cpu相关。<h4 id="模型图"><a href="#模型图" class="headerlink" title="模型图"></a>模型图</h4></li></ol><p><img src="https://img-blog.csdnimg.cn/20200410122013874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI4NzQ3OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>每次new出来的对象都会存入堆内存中，而这个对象的引用会指向对象的地址。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		User user1 = <span class="keyword">new</span> User();</span><br><span class="line">		System.out.println(user1);</span><br><span class="line">		</span><br><span class="line">		User user2 = <span class="keyword">new</span> User();</span><br><span class="line">		System.out.println(user2);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200410122223941.png" alt="在这里插入图片描述"><br>打印结果为两个对象的地址值。</p><!-- rebuild by neat -->]]></content>
      <tags>
        <tag>Java基础</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java基础】字符串String有哪几种创建姿态？</title>
    <url>/posts/9876.html</url>
    <content><![CDATA[<!-- build time:Thu May 14 2020 12:50:22 GMT+0800 (GMT+08:00) --><h4 id="一、字符串概念"><a href="#一、字符串概念" class="headerlink" title="一、字符串概念"></a>一、字符串概念</h4><ol><li>字符串的内容不可变。（*****）</li><li>字符串共享使用。</li><li>字符串相当于时char[]字符数组，底层原理是byte[]。<h4 id="二、创建方式"><a href="#二、创建方式" class="headerlink" title="二、创建方式"></a>二、创建方式</h4><strong>三种构造方法</strong><ol><li>public String();</li><li>public String(char[] array);</li><li>public String(byte[] array);</li></ol></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.赋值为字符串</span></span><br><span class="line">String st1 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">System.out.println(st1);</span><br><span class="line"><span class="comment">//2.字符数组</span></span><br><span class="line"><span class="keyword">char</span>[] ch = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;;</span><br><span class="line">String st2 = <span class="keyword">new</span> String(ch);</span><br><span class="line">System.out.println(st2);</span><br><span class="line"><span class="comment">//3.字节数组</span></span><br><span class="line"><span class="keyword">byte</span>[] bytes = &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>&#125;;</span><br><span class="line">String st3 = <span class="keyword">new</span> String(bytes);</span><br><span class="line">System.out.println(st3);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200412001929363.png" alt="在这里插入图片描述"><br>验证结果可行。</p><ol start="4"><li>直接创建 String st = “abc”;</li></ol><p>那么直接创建与构造方法创建有什么区别呢？</p><h4 id="三、什么是常量池？"><a href="#三、什么是常量池？" class="headerlink" title="三、什么是常量池？"></a>三、什么是常量池？</h4><p>解释：程序当中直接写上的双引号字符串，就在字符串常量池中。</p><p>首先我们要知道这样两个概念。</p><ol><li>在基本数据类型中，==表示比较的是数值是否相等。</li><li>在引用数据类型中，==比较的是两个对象的地址值。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String st1 = <span class="string">"abc"</span>;</span><br><span class="line">String st2 = <span class="string">"abc"</span>;</span><br><span class="line">String st3 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(st1 == st2); <span class="comment">//true</span></span><br><span class="line">System.out.println(st1 == st3); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200412002915203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI4NzQ3OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>当直接给字符串赋值时存在常量池中，如果常量池中有这个String对象，则该引用会直接指向该对象，不会再去创建。这也时st1与st2地址值相同的原因。</p><!-- rebuild by neat -->]]></content>
      <tags>
        <tag>Java基础</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>【springboot】整合mybatis</title>
    <url>/posts/27111.html</url>
    <content><![CDATA[<!-- build time:Thu May 14 2020 12:50:22 GMT+0800 (GMT+08:00) --><h3 id="1-添加mybatis的起步依赖"><a href="#1-添加mybatis的起步依赖" class="headerlink" title="1.添加mybatis的起步依赖"></a>1.添加mybatis的起步依赖</h3><p>由于springboot本身没有整合mybatis，所以我们需要自己导入坐标</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--mybatis起步依赖--&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.1.1&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="2-添加数据库坐标"><a href="#2-添加数据库坐标" class="headerlink" title="2.添加数据库坐标"></a>2.添加数据库坐标</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- MySQL连接驱动 --&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="3-添加数据库连接信息"><a href="#3-添加数据库连接信息" class="headerlink" title="3.添加数据库连接信息"></a>3.添加数据库连接信息</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#DB Configuration:</span><br><span class="line">spring.datasource.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//127.0.0.1:3306/test?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC </span></span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=root</span><br></pre></td></tr></table></figure><p><strong>action:</strong>在url后面添加&amp;serverTimezone=UTC 这段代码，否则会报错</p><h3 id="4-在test数据库中创建user表"><a href="#4-在test数据库中创建user表" class="headerlink" title="4.在test数据库中创建user表"></a>4.在test数据库中创建user表</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure <span class="keyword">for</span> `user`</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `user`;</span><br><span class="line">CREATE TABLE `user` (</span><br><span class="line">  `id` <span class="keyword">int</span>(<span class="number">11</span>) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `username` varchar(<span class="number">50</span>) DEFAULT NULL,</span><br><span class="line">  `password` varchar(<span class="number">50</span>) DEFAULT NULL,</span><br><span class="line">  `name` varchar(<span class="number">50</span>) DEFAULT NULL,</span><br><span class="line">  <span class="function">PRIMARY <span class="title">KEY</span> <span class="params">(`id`)</span></span></span><br><span class="line"><span class="function">) ENGINE</span>=InnoDB AUTO_INCREMENT=<span class="number">10</span> DEFAULT CHARSET=utf8;</span><br><span class="line"> </span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of user</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `user` VALUES (<span class="string">'1'</span>, <span class="string">'zhangsan'</span>, <span class="string">'123'</span>, <span class="string">'张三'</span>);</span><br><span class="line">INSERT INTO `user` VALUES (<span class="string">'2'</span>, <span class="string">'lisi'</span>, <span class="string">'123'</span>, <span class="string">'李四'</span>);</span><br></pre></td></tr></table></figure><h3 id="5-创建User实体类"><a href="#5-创建User实体类" class="headerlink" title="5.创建User实体类"></a>5.创建User实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.domain;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> boyi on 2019/12/8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 主键</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">// 用户名</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="comment">// 密码</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-编写Mapper接口"><a href="#6-编写Mapper接口" class="headerlink" title="6.编写Mapper接口"></a>6.编写Mapper接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> boyi on 2019/12/8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-配置Mapper映射文件"><a href="#7-配置Mapper映射文件" class="headerlink" title="7.配置Mapper映射文件"></a>7.配置Mapper映射文件</h3><p><img src="https://img-blog.csdnimg.cn/20191208214955590.png" alt="在这里插入图片描述"></p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.itheima.mapper.UserMapper"</span>&gt;</span><br><span class="line">    &lt;select id=<span class="string">"queryUserList"</span> resultType=<span class="string">"user"</span>&gt;</span><br><span class="line">        select * from user</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h3 id="8-在application-preperties中添加mybatis信息"><a href="#8-在application-preperties中添加mybatis信息" class="headerlink" title="8.在application.preperties中添加mybatis信息"></a>8.在application.preperties中添加mybatis信息</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#spring集成Mybatis环境</span><br><span class="line">#pojo别名扫描包</span><br><span class="line">mybatis.type-aliases-<span class="keyword">package</span>=com.itheima.domain</span><br><span class="line">#加载Mybatis映射文件</span><br><span class="line">mybatis.mapper-locations=classpath:mapper<span class="comment">/*Mapper.xml</span></span><br></pre></td></tr></table></figure><h3 id="9-编写测试controller"><a href="#9-编写测试controller" class="headerlink" title="9.编写测试controller"></a>9.编写测试controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.User;</span><br><span class="line"><span class="keyword">import</span> com.itheima.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> boyi on 2019/12/8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/query"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.queryUserList();</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-结果展示"><a href="#10-结果展示" class="headerlink" title="10.结果展示"></a>10.结果展示</h3><p><img src="https://img-blog.csdnimg.cn/20191208221757464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI4NzQ3OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><!-- rebuild by neat -->]]></content>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>抽象类与接口区别</title>
    <url>/posts/2988.html</url>
    <content><![CDATA[<!-- build time:Thu May 14 2020 12:50:22 GMT+0800 (GMT+08:00) --><h1 id="接口与抽象类的区别"><a href="#接口与抽象类的区别" class="headerlink" title="接口与抽象类的区别"></a>接口与抽象类的区别</h1><h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><table><thead><tr><th>抽象类</th><th>接口</th></tr></thead><tbody><tr><td>可以有构造方法，子类创建时初始化</td><td>没有构造方法</td></tr><tr><td>可以有抽象方法和具体方法</td><td>有抽象方法和默认（jdk8）、静态（jdk8）、私有方法（jdk9）</td></tr><tr><td>可以有成员变量</td><td>没有成员变量，只有public static final修饰的常量（无默认值）</td></tr><tr><td>抽象类中抽象方法访问权限有public、protected、包访问权限</td><td>接口中抽象方法只能是public abstract修饰的（默认），可以省略不写</td></tr><tr><td>一个类只能继承一个抽象类</td><td>一个类可以实现多个接口</td></tr></tbody></table><h3 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h3><ol><li>不能被实例化</li><li>可以将抽象类和接口类型作为引用类型</li><li>一个类如果继承了某个抽象类或者实现了某个接口都需要对其中的抽象方法全部进行实现，否则该类仍然需要<br>被声明为抽象类</li></ol><!-- rebuild by neat -->]]></content>
      <tags>
        <tag>接口</tag>
        <tag>抽象类</tag>
      </tags>
  </entry>
  <entry>
    <title>接口</title>
    <url>/posts/27497.html</url>
    <content><![CDATA[<!-- build time:Thu May 14 2020 12:50:22 GMT+0800 (GMT+08:00) --><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h3 id="接口概述"><a href="#接口概述" class="headerlink" title="接口概述"></a>接口概述</h3><p>接口，是Java语言中一种引用类型，是方法的集合，如果说类的内部封装了成员变量、构造方法和成员方法，那么<br>接口的内部主要就是封装了方法，包含抽象方法（JDK 7及以前），默认方法和静态方法（JDK 8），私有方法（JDK 9）。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">area</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">zouChang</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sanjiao</span> <span class="keyword">implements</span>  <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">area</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"三角形的面积"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">zouChang</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"三角形的周长"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Shape sjx = <span class="keyword">new</span> Sanjiao();</span><br><span class="line">    sjx.area();</span><br><span class="line">    sjx.zouChang();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>接口中的方法必须是<strong>public abstract</strong>的，可以不写，默认会有。</li><li>没有构造方法。</li></ul><h3 id="含有默认方法和静态方法（jdk8）"><a href="#含有默认方法和静态方法（jdk8）" class="headerlink" title="含有默认方法和静态方法（jdk8）"></a>含有默认方法和静态方法（jdk8）</h3><p>默认方法：使用 default 修饰，不可省略，供子类调用或者子类重写。<br>静态方法：使用 static 修饰，供接口直接调用。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InterFaceName</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 执行语句</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 执行语句   </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认方法必须通过子类对象来调用，可以重写。</li></ul><p>接口：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LiveAble</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"天上飞"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> <span class="keyword">implements</span> <span class="title">LiveAble</span> </span>&#123;</span><br><span class="line"><span class="comment">// 继承，什么都不用写，直接调用    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterfaceDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建子类对象 </span></span><br><span class="line">        Animal a = <span class="keyword">new</span> Animal();</span><br><span class="line">        <span class="comment">// 调用默认方法</span></span><br><span class="line">        a.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>静态与.class 文件相关，只能使用<strong>接口名调用</strong>，不可以通过实现类的类名或者实现类的对象调用。</li></ul><p>接口：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LiveAble</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"跑起来~~~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> <span class="keyword">implements</span> <span class="title">LiveAble</span> </span>&#123;</span><br><span class="line"><span class="comment">// 无法重写静态方法    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterfaceDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Animal.run(); // 【错误】无法继承方法,也无法调用</span></span><br><span class="line">        LiveAble.run(); <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">跑起来~~~</span><br></pre></td></tr></table></figure><h3 id="私有方法的使用-jdk9"><a href="#私有方法的使用-jdk9" class="headerlink" title="私有方法的使用(jdk9)"></a>私有方法的使用(jdk9)</h3><p>私有方法：只有默认方法可以调用。<br>私有静态方法：默认方法和静态方法可以调用。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LiveAble</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">        func1();</span><br><span class="line">        func2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"跑起来~~~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"跑起来~~~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>一个类可以实现多个接口</strong></li></ul><p>其他特点</p><ul><li><p>接口中，无法定义成员变量，但是可以定义常量，其值不可以改变，默认使用 public static final修饰(<strong>必须赋初值，没有默认值</strong>)。</p></li><li><p>接口中，没有构造方法，不能创建对象。</p></li><li><p>接口中，没有静态代码块。</p></li></ul><!-- rebuild by neat -->]]></content>
      <tags>
        <tag>接口</tag>
      </tags>
  </entry>
</search>
